---
title : GrowthMaps.jl example
author : Rafael Schouten
---

# Growth rate calculation

In this example we will calculate the expected population growth rates of
Spotted Wing Drosophila _D. suzukii_, for each month of the year on a 9km grid
accross North America.

We'll subsample down to using just one day per month so the model runs really
fast. If you have a GPU you may want to try running more days.


### Load the required packages


```julia; results=hidden
using GrowthMaps, GeoData, Dates, Plots, Unitful, Pkg
using GeoData: Time
# Load some Unitful.jl units
using Unitful: °C, K
basedir = Pkg.dir("GrowthMaps")

# download some smap files?
```

Load the file series and set a window for the data that is loaded, to save
processing time:


```julia; results=hidden
window = Lon<|Between(-125, -75), Lat(150:480)
series = SMAPseries(joinpath(basedir, "test"); window=window);
```

We can plot a layer from a file at some date in the series:


```julia; results=hidden
series[Near(Date(2016))][:surface_temp] |> plot
savefig("build/assets/surface_temp.png")
```

![Sea surface temperature](../assets/surface_temp.png)

Set the time period to a month, and set the length of the subsample period to
the available times over one day:



### Define parameters


```julia; results=hidden
p25 = 3.377850e-01
H_A = 3.574560e+04K
H_L = -1.108990e+05K
T_0_5L = 2.359187e+02K
H_H = 3.276604e+05K
T_0_5H = 2.991132e+02K

lowersm = 0.0 # no data
uppers = 1.0 # no data
lowerct = 7.0°C |> K  # Enriquez2017
lowerctm = -log(1.00) * K^-1
upperct = 30.0°C |> K # Kimura2004
upperctm = -log(1.15) * K^-1
lowerwilt = 0.5 # default?
wiltingm = -log(1.1)
```

### Define model components

The first parameter is always the key for the layer, from the list we saw
earlier using `keys()`.


```julia; results=hidden
growth = IntrinsicPopGrowth(:surface_temp, 1/K, p25, H_A, H_L, T_0_5L, H_H, T_0_5H)
cold = ColdDays(:surface_temp, lowerct, lowerctm)
hot = HotDays(:surface_temp, upperct, upperctm)
wilt = Wilting(:land_fraction_wilting, lowerwilt, wiltingm)
```

### Combine components into a model

To build a model, we simple chain components together in a tuple:


```julia; results=hidden
model = (growth, cold, hot, wilt)
# Some alternative models:
# model = (wilt,)
# model = (growth, wilt)
# model = (growth, cold, hot)
```

### Use your GPU?

If you have a GPU you can use `CuArray` from
[CuArrays.jl](https://github.com/JuliaGPU/CuArrays.jl) to move processing to the
GPU for a ~10x performance improvement. Otherwise the `identity` function simply
leaves the data as-is on the CPU.


```julia; results=hidden
constructor = identity
# using CuArrays
# constructor = CuArray
```

## Run your model


```julia; results=hidden
output = growthrates(model, series; 
                     period=Second(356.25*24*60*60/12),
                     nperiods=12,
                     subperiod=Day(1), 
                     constructor=constructor)
output[Time(1)] |> plot
savefig("build/assets/growthrates.png")
```

![Growth Rates](../assets/growthrates.png)

Save the output to the `docs/build` folder (or wherever you like).

```julia; results=hidden
using JLD2
path = joinpath(basedir, "docs/build")
mkpath(path)
rates = output
@save joinpath(path, "growthrates.jld2") rates 
```

# Writing your own model components

Model components are just julia structs that have `rates` and `conditions`
methods. You can use struct fields for any parameters you need. See the
[models.jl](


