---
title : GrowthMaps.jl example
author : Rafael Schouten, James Maino
---

# Growth rate calculation

In this example we will calculate the expected population growth rates of
Spotted Wing Drosophila _D. suzukii_, for each month of the year on a 9km grid
accross North America.

We'll subsample down to using just one day per month so the model runs really
fast. If you have a GPU you may want to try running more days.


## Load the required packages


```julia; results=hidden
using GrowthMaps, GeoData, Dates, Plots, Unitful, Pkg, Statistics
using GeoData: Time
# Load some Unitful.jl units
using Unitful: °C, K, cal, mol
basedir = Pkg.dir("GrowthMaps")
```

Download some SMAP data to use in the model:

```julia; results=hidden
dataurl = "https://media.githubusercontent.com/media/cesaraustralia/GrowthMaps.jl/data"
zipfilename = "SMAP_aggregated27km.zip"

folder = "SMAP_aggregated27km"

isfile(zipfilename) || download(joinpath(dataurl, zipfilename))
run(`unzip -o $zipfilename`)
filenames = readdir(folder)
```

Separate out wilting and surface temp filenames using `filter`:

```julia; results=hidden
wilting = joinpath.(Ref(folder), filter(fn -> occursin(r"land_fraction_wilting", fn), filenames))
surface_temp = joinpath.(Ref(folder), filter(fn -> occursin(r"surface_temp", fn), filenames))
```

Get series dates from `surface_temp` files using regex:

```julia; results=hidden
df = DateFormat("yyyymmddTHHMMSS");
dates = DateTime.(replace.(surface_temp, Ref(r".*_(\d+T\d+).tif" => s"\1")), Ref(df))
```

```julia; results=hidden
A = GDALarray(surface_temp[1])
stacks = [GDALstack((land_fraction_wilting=wilting[i], surface_temp=surface_temp[i]); 
                    dims=dims(A)) for i in 1:length(surface_temp)]
stacks[1][:surface_temp]
series = GeoSeries(stacks, (Time(dates),));
```


We can plot a layer from a file at some date in the series:

```julia; results=hidden
pyplot()
series[Near(DateTime(2016,1))][:surface_temp] |> plot
savefig("build/assets/surface_temp.png")
```

![Sea surface temperature](../assets/surface_temp.png)

Set the time period to a month, and set the length of the subsample period to
the available times over one day:


## Define model components

First we'll define the growth model using `IntrsinsicGrowth`, based on
Schoolfield (1981).

When defining model components, the first parameter is always the key for the
stack layer, from the list we saw earlier using `keys()`.

```julia; results=hidden
p = 3.377850e-01
ΔH_A = 3.574560e+04cal/mol
ΔH_L = -1.108990e+05cal/mol
ΔH_H = 3.276604e+05cal/mol
Thalf_L = 2.359187e+02K
Thalf_H = 2.991132e+02K
T_ref = K(25.0°C)
R = Unitful.R
growth = SchoolfieldIntrinsicGrowth(:surface_temp, p, ΔH_A, ΔH_L, 
                         ΔH_H, Thalf_L, Thalf_H, T_ref, R);
```

Now we define stress models for cold, heat and wilt stress. As these insects
live on and around plants, we use wilting as an indicater of stress induced by
lack of moisture. These models have a threshold in K and mortality rate per
degree K. `LowerStress` models stress below the given threshold, while
`UpperStress` models stress induced above a threshold.

```julia; results=hidden
coldthresh = 7.0°C |> K  # Enriquez2017
coldmort = -log(1.00) * K^-1
coldstress = LowerStress(:surface_temp, coldthresh, coldmort)

heatthresh = 30.0°C |> K # Kimura2004
heatmort = -log(1.15) * K^-1
heatstress = UpperStress(:surface_temp, heatthresh, heatmort)

wiltthresh = 0.5 # default?
wiltmort = -log(1.1);
wiltstress = UpperStress(:land_fraction_wilting, wiltthresh, wiltmort);
```

## Define a model

First we'll define a simple model that only calculates growth rate.

```julia; results=hidden
model = growth;
```

And run it:

```julia; results=hidden
output = mapgrowth(model, series; period=Month(1), 
                   nperiods=12, subperiod=Day(1));
```

The create a plot of the sixth month.

```julia; results=hidden
output[Time(1)] |> plot
```

We can see it doesn't really capture realistic population dynamics - we have not 
growth rates below zero!

To build a more complex (and hopefully accurate) model, we can chain components 
together in a tuple:

```julia; results=hidden
model = growth, wiltstress;
```

And again, run and plot them:

```julia; results=hidden
output = mapgrowth(model, series; period=Month(1), 
                   nperiods=12, subperiod=Day(1));
output[Time(1)] |> plot
```

That looks better. There are negative growth rates in the desert now.
Now lets define a full model with growth and three stressors:

```julia; results=hidden
model = growth, coldstress, heatstress, wiltstress
output = mapgrowth(model, series; period=Month(1), 
                   nperiods=12, subperiod=Day(1));
output[Time(1)] |> plot
savefig("build/assets/growthrates.png");
```

![Growth Rates](../assets/growthrates.png)

Save the output to the `docs/build` folder (or wherever you like).

```julia; results=hidden
using JLD2
path = joinpath(basedir, "docs/build")
mkpath(path)
growthrates = output
@save joinpath(path, "growthrates.jld2") growthrates 
```

## Compare with observation data

Plot again, setting the x and y lims (do automatically in GeoData.jl?)

```julia; results=hiddeats
array = output[Time(1)]
p = plot(array; xlim=bounds(dims(array, Lon)), ylim=bounds(dims(array, Lat)))
```

Load observations from a CSV file, and scatter them on the map. The
`zip` function joins Lat and Lon columns into point tuples, which can 
be plotting using Plots.jl.

```julia; results=hiddeats
using CSV
csvurl = "https://raw.githubusercontent.com/cesaraustralia/GrowthMaps.jl/data/"
csvfilename = "Oersted_occurrence.csv"
isfile(csvfilename) || download(joinpath(csvurl, csvfilename))
obs = CSV.File(csvfilename)
scatter!(p, collect(zip(obs.Longitude, obs.Latitude)); 
         markersize=4.0, markercolor=:white, markershape=:circle, label="obs",
         xlim=bounds(dims(array, Lon)), ylim=bounds(dims(array, Lat))
         )
```


Writing your own models. Here we can analise how the `SchoolfieldIntrinsicGrowth`
model works, in order to add new formulations. 

First we need to define a julia struct to hold our parameters and choose the rate method 
to dispatch on in the simulation.

It should inherit from `GrowthModel` or `StressModel`, and must have a `K` type parameter
that will hold the layer key symbol. Then use one type parameter for each type parameter 
(here `P`, `HA` etc) these allow different float or unit types to share the same code with 
high performance.  You can use unicode special characters for parameter names.

```julia
struct SchoolfieldIntrinsicGrowth2{K,P,HA,HL,HH,TL,TH,TR,R} <: GrowthModel{K}
    p::P
    ΔH_A::HA
    ΔH_L::HL
    ΔH_H::HH
    T_halfL::TL
    T_halfH::TH
    T_ref::TR
    R::R
end
```

Then we can define a method of `rate` that will be run for each cell in the grid.
The `@inline` macro ensures that the code can be complied together with the other
models into a single broadcast operation, which in most cases improves performance.
Fields of the `SchoolfieldIntrinsicGrowth` are used as parameters in the equation.
Notice we multiply the array value by `oneunit` of the `T_ref` variable to allow 
using Unitful.jl units (K), without specifying them in the array.

```julia
@inline rate(m::SchoolfieldIntrinsicGrowth, x) = begin
    x *= oneunit(m.T_ref)
    m.p * x/m.T_ref * exp(m.ΔH_A/m.R * (1/m.T_ref - 1/x)) /
        (1 + exp(m.ΔH_L/m.R * (1/m.T_halfL - 1/x)) + exp(m.ΔH_H/m.R * (1/m.T_halfH - 1/x)))
end
```

We can also define a `condition` method that will return a boolean to 
filter out values where no rate
will be calculated and added to the overall growth rate. 
The default is simply to return `true` and run for all cells.
This `condition` method is fore the `UpperStress` model:

```julia
@inline condition(m::UpperStress, x) = x * oneunit(m.threshold) > m.threshold
```

